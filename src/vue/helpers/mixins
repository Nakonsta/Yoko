export default {
    methods: {
        objectToFormDataJava(data) {
            const fData = new FormData()

            function appendFormData(data, root, formDataObj) {
                root = root || ''
                if (data instanceof File) {
                    formDataObj.append(root, data)
                } else if (Array.isArray(data)) {
                    for (let i = 0; i < data.length; i++) {
                        appendFormData(data[i], root, formDataObj)
                    }
                } else if (typeof data === 'object' && data) {
                    for (const key in data) {
                        // eslint-disable-next-line
                        if (data.hasOwnProperty(key)) {
                            if (root === '') {
                                appendFormData(data[key], key, formDataObj)
                            } else {
                                appendFormData(data[key], root + '.' + key, formDataObj)
                            }
                        }
                    }
                } else if (data !== null && typeof data !== 'undefined') {
                    formDataObj.append(root, data)
                }
            }

            appendFormData(data, '', fData)

            return fData
        },
        authorizationMethod(user, token, rememberMe) {
            axios.defaults.headers.common.Authorization = `Bearer ${token}`
            if (rememberMe) {
                const now = new Date()
                now.setDate(now.getDate() + 7)

                const options = {
                    expires: now,
                }

                if (process.env.AUTH_DOMAIN) {
                    options.domain = process.env.AUTH_DOMAIN
                }

                document.cookie = `auth._token.local=Bearer%20${token};${
                    process.env.AUTH_DOMAIN && `domain=${process.env.AUTH_DOMAIN}`
                };expires=${now};path=/`
            } else {
                document.cookie = `auth._token.local=Bearer%20${token};${
                    process.env.AUTH_DOMAIN && `domain=${process.env.AUTH_DOMAIN}`
                };path=/`
            }

            this.$store.commit('setUser', { user, token });
        },
    },
}
